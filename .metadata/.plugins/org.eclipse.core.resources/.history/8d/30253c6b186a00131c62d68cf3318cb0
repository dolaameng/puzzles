/**
 * References: 
 * http://aperiodic.net/phil/scala/s-99/
 * https://github.com/jsuereth/scala-99-puzzles/blob/master/src/test/scala/suereth/TestNinetyNine.scala
 */

object Puzzles99 extends App {
  
  val xs = List(1, 2, 5, -1, 100, 16, 99)
  val palindrome = List(1, 2, 5, -1, 5, 2, 1)
  val ys = List('a, 'a, 'a, 'a, 'b, 'c, 'c, 'a, 'a, 'd, 'e, 'e, 'e, 'e)
  
  /**
   * For recursion implementation, the usually direction includes
   * (1) Linear: P08
   * (2) Tree DF: P07
   * (3) Twisted: 
   * (4) Biend Linear: P06
   */
  
  /**
   * Working with Lists P01 - P28
   */
  // P01: Find the last element of a list (builtin)
  println("P01:" + xs.last)
  // P02: Find the last but one of a list
  println("P02:" + xs.init.last)
  // P03: Find the kth element of a list
  println("P03:" + xs(3))
  // P04: Find the number of element in a list
  println("P04:" + xs.length)
  // P05: Reverse a list
  println("P05:" + xs.reverse)
  // P06: Find out whether a list is palindrome
  def isPalindrome[T](xs: List[T]) : Boolean = xs match {
    case Nil => true
    case x::Nil => true
    case _ => if (xs.head != xs.last) false else isPalindrome(xs.tail.init)
  }
  println("P06:" + isPalindrome(xs))
  println("P06:" + isPalindrome(palindrome))
  // P07: Flatten a nested list
  // Think this as a depth-first traverse - the boundary case is the leaf node
  def flatten(xs: List[Any]) : List[Any] = 
    xs flatMap {
    	case x : List[Any] => flatten(x)
    	case x => List(x)
  	}
  println("P07:" + flatten(List(List(1, 1), 2, List(3, List(5, 8)))))
  // P08: Eliminate consecutive duplicates of list elements
  def compress[T](xs: List[T]) : List[T] = xs match {
    case Nil => Nil
    case x::xxs => x::compress(xxs dropWhile (_ == x))
  }
  def compressFunctional[T](xs: List[T]) : List[T] = 
    xs.foldRight(List[T]())((x, xs) => if (x == xs.head) xs else x::xs) 
  println("P08:" + compress(ys))
  println("P08 (functional):" + compress(ys))
  /**
   * Arithmetic P31 - P41
   */
  
  /** Logic and Codes P46 - P50
   *  
   */
  
  /** 
   *  Binary Trees P55 - P69
   */
  
  /**
   * Multiway Trees P70 - P73
   */
  
  /**
   * Graphs P80 - P89
   */
  
  /** 
   *  Miscs P90 - P99
   */
}